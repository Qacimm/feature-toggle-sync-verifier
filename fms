#!/bin/bash

# Check that a file containing variable names was provided
if [[ -z "$1" ]]; then
  echo ""
  echo "Usage: $0 <file-containing-variable-names> [dev|prod]"
  echo ""
  exit 1
fi

FILE="$1"
if [[ ! -f "$FILE" ]]; then
  echo ""
  echo "Error: File '$FILE' does not exist."
  echo ""
  exit 1
fi

ENV="${2:-dev}"  # Default to dev if not specified
OUTPUT_FILE="fms-${ENV}-details.txt"
BATCH_SIZE=100

# Define variables for headers
ACCEPT="application/json, text/plain, */*"
USER_AGENT="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"

# Function to log only to file
log() {
  echo "$1" >> "$OUTPUT_FILE"
}

# Function to log JSON in pretty format
log_json() {
  local json="$1"
  local vars=("${@:2}")
  
  for var in "${vars[@]}"; do
    log ""
    log "Processing variable: $var"
    log ""
    
    valueOnly=$(echo "$json" | /opt/homebrew/bin/jq ".[\"$var\"]" 2>/dev/null)
    if [[ "$valueOnly" != "null" ]]; then
      log "$valueOnly"
    fi
  done
}

# Clear output file if it exists
> "$OUTPUT_FILE"

log "Starting script execution for environment: $ENV"
log "$(date)"
log ""

echo "Processing variables in batches of $BATCH_SIZE. Please wait..."

# Use this:
all_vars=()
while IFS= read -r line; do
  # Skip empty lines
  if [[ -n $(echo "$line" | /usr/bin/tr -d '[:space:]') ]]; then
    all_vars+=("$(echo "$line" | /usr/bin/xargs)")
  fi
done < "$FILE"
total_vars=${#all_vars[@]}

# Process in batches
for ((i=0; i<total_vars; i+=BATCH_SIZE)); do
  # Get current batch (up to BATCH_SIZE variables)
  end=$((i + BATCH_SIZE))
  if [[ $end -gt $total_vars ]]; then
    end=$total_vars
  fi
  
  # Extract the batch and join with commas
  batch=()
  for ((j=i; j<end; j++)); do
    batch+=("${all_vars[j]}")
  done
  
  joined_vars=$(IFS=,; echo "${batch[*]}")
  
  echo -n "Processing batch $((i/BATCH_SIZE + 1))... "
  
  # Request rollout information for the batch based on environment
  if [[ "$ENV" == "dev" ]]; then
    rolloutInfo=$(/usr/bin/curl -s -X GET "http://qa-feature-management-service.careem-internal.com/v1/feature?feature=$joined_vars" \
      -H "Accept: $ACCEPT" \
      -H "User-Agent: $USER_AGENT" \
      --compressed)
    log_json "$rolloutInfo" "${batch[@]}"
  else
    rolloutInfo=$(/usr/bin/curl -s -X GET "http://feature-management-service.careem-engineering.com/v1/feature?feature=$joined_vars" \
      -H "Accept: $ACCEPT" \
      -H "User-Agent: $USER_AGENT" \
      --compressed)
    log_json "$rolloutInfo" "${batch[@]}"
  fi
  
  echo "done"
done

log ""
log "Script execution completed"
log "$(date)"

echo -e "\nAll results have been saved to $OUTPUT_FILE"